import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { Books } from "../Enums/Books";
import { IBookType } from "../interfaces/IBookType";
import { ITranslation } from "../interfaces/ITranslations";
import { bookTypes } from "../models/BookTypes";
import { Verse } from "../models/verse";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const [translations, setTranslations] = useState<Array<ITranslation>>([]);
  const [translation, setTranslation] = useState<string>("valera");
  const [book, setBook] = useState<string>("01O");
  const [chapter, setChapter] = useState<number>(0);
  const [chapters, setChapters] = useState<number[]>([]);
  const [verses, setVerses] = useState<Verse[]>([]);
  const [cita, setCita] = useState<string>();

  const handlerSearch = async () => {
    let libro: string = "";
    let chapter: string = "";
    let verses: string = "";
    const split = cita?.split(" ");
    if (split && split?.length > 1) {
      libro = split[0];
      var arr = split[1].split(":");
      chapter = arr[0];
      verses = arr[1];
    }
    console.log({ book, chapter, verses });
    try {
      const result = await fetch(`api/passage?v=${translation}&b=${book}`);
      const data = await result.json();
      console.log(data);
    } catch (error) {
      console.error(error);
    }
  };
  useEffect(() => {
    const getTranslations = async () => {
      const result = await fetch("api/translations");

      let translations: Array<ITranslation> = await result.json();
      setTranslations(translations);
    };
    getTranslations();
  }, []);
  useEffect(() => {
    const getChapters = async () => {
      const num = bookTypes.find((x) => x.code == book)?.chapters ?? 0;
      let arr: number[] = [];
      for (let index = 1; index <= num; index++) {
        arr.push(index);
      }
      setChapters(arr);
    };
    getChapters();
  }, [book]);
  useEffect(() => {
    if (book && chapter && chapter > 0) {
      fetch(`/api/passage?v=${translation}&b=${book}&c=${chapter}`)
        .then(async (response) => {
          setVerses(await response.json());
        })
        .catch((error) => console.log(error));
    }
  }, [chapter, book, translation]);
  return (
    <div className={styles.container}>
      <Head>
        <title>Scripture</title>
        <meta name="description" content="Generated by Scripture" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="">Scripture</a>
        </h1>
        <section className={styles.searchContainer}>
          <select
            value={translation}
            onChange={(e) => {
              console.log(e.target.value);
              setTranslation(e.target.value);
            }}
          >
            {translations.map((x) => (
              <option value={x.abbreviation} key={x.hash}>
                {x.abbreviation}-{x.language}
              </option>
            ))}
          </select>
          <select
            name=""
            id=""
            value={book}
            onChange={(e) => setBook(e.target.value)}
          >
            {bookTypes.map((x, i) => (
              <option key={i} value={x.code}>
                {x.name}
              </option>
            ))}
          </select>
        </section>
        {/* <section className={styles.searchContainer}>
          <input
            type="text"
            className={styles.inputSearch}
            placeholder="Jhon 14:1-16"
            value={cita}
            onChange={(e) => setCita(e.target.value)}
          />
          <button className={styles.searchButton} onClick={handlerSearch}>
            Search
          </button>
        </section> */}
        <section>
          {chapters.map((x) => (
            <button
              onClick={(e) => setChapter(x)}
              key={x}
              style={{ backgroundColor: chapter == x ? "#0070f3" : "white" }}
            >
              {x}
            </button>
          ))}
        </section>
        <section className={styles.versesContainer}>
          {verses.length > 0 && (
            <h2>{bookTypes.find((x) => x.code == verses[0].book_nr)?.name}-{verses[0].chapter_nr}</h2>
          )}
          <hr />
          {verses.map((v) => (
            <p key={v.verse_nr}>
              <sup>{v.verse_nr}</sup> {v.verse}
            </p>
          ))}
        </section>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://github.com/virgerick"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by virgerick
          {/* <Image src="/profile.jpg" alt="Vercel Logo" width={100} height={100} className="logo" /> */}
        </a>
      </footer>
    </div>
  );
};
export default Home;
